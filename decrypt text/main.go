package main

import (
	"crypto/aes"
	"crypto/cipher"
	"encoding/hex"
	"fmt"
)

func decryptAES(key []byte, ciphertext []byte, nonce []byte) ([]byte, error) {
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}

	aesGCM, err := cipher.NewGCM(block)
	if err != nil {
		return nil, err
	}

	plaintext, err := aesGCM.Open(nil, nonce, ciphertext, nil)
	if err != nil {
		return nil, err
	}

	return plaintext, nil
}

func main() {
	// Replace these values with the key, ciphertext, and nonce generated by the encryption program
	key := []byte{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f}
	ciphertextHex := "d38a0153b2efcdb7c9dc1abb99690420dd6eba3fa46f0da37614c243b0"
	nonceHex := "648bda4f22986c77054002bd"

	// Decode the hex-encoded ciphertext and nonce
	ciphertext, err := hex.DecodeString(ciphertextHex)
	if err != nil {
		fmt.Println("Ciphertext decoding error:", err)
		return
	}

	nonce, err := hex.DecodeString(nonceHex)
	if err != nil {
		fmt.Println("Nonce decoding error:", err)
		return
	}

	plaintext, err := decryptAES(key, ciphertext, nonce)
	if err != nil {
		fmt.Println("Decryption error:", err)
		return
	}

	fmt.Println("Decrypted:", string(plaintext))
}
